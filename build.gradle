plugins {
	id 'java-library'
	id 'eclipse'
	id 'com.github.johnrengelman.shadow' version '7.1.2'
	id 'maven-publish'
}

group = 'etri'
version = '0.1.0'

sourceCompatibility = '11'
targetCompatibility = '11'
[compileJava,compileTestJava]*.options*.encoding = 'UTF-8'

sourceSets {
	main {
		java {
			srcDirs 'build/generated-main-avro-java'
		}
	}
}

repositories {
	mavenLocal()
	maven {
		url "http://repo.osgeo.org/repository/release/"
		allowInsecureProtocol = true
	}
	maven {
		url "https://packages.confluent.io/maven/"
		allowInsecureProtocol = true
	}
	mavenCentral()
}

ext {
	log4j_version = '2.18.0'
	gson_version = '2.9.0'
	zip4j_version = '2.11.1'
	
	geotools_version = '26.1'
	jts_version = '1.18.2'
	
	hadoop_version = '2.7.3'
	kafka_version = '3.2.1'
}

dependencies {
	implementation project(":utils")
	implementation project(":jarvey.common")
	implementation project(":jarvey.streams")
	implementation project(":rotating-fos")
	
	// Log4j2 & SLF4j bridge
	implementation "org.apache.logging.log4j:log4j-api:${log4j_version}"
	implementation "org.apache.logging.log4j:log4j-core:${log4j_version}"
	implementation "org.apache.logging.log4j:log4j-slf4j-impl:${log4j_version}"
	
	// Kafka
	implementation "org.apache.kafka:kafka-clients:${kafka_version}"
	
	// Hadoop
	implementation ("org.apache.hadoop:hadoop-common:${hadoop_version}") {
		exclude group: 'org.slf4j', module: 'slf4j-log4j12'
		exclude group: 'log4j', module: 'log4j'
	}
	implementation ("org.apache.hadoop:hadoop-hdfs:${hadoop_version}") {
		exclude group: 'log4j', module: 'log4j'
	}
	
	// Handling zip4
	implementation "net.lingala.zip4j:zip4j:${zip4j_version}"
	
	// Handling json
	implementation "com.google.code.gson:gson:${gson_version}"
	
	testImplementation group: 'junit', name: 'junit', version: '4.12'
}

shadowJar {
	classifier 'all'
	
	zip64 true
	mergeServiceFiles()
	
	exclude 'META-INF/*.SF'
	exclude 'META-INF/*.DSA'
	exclude 'META-INF/*.RSA'
}

task sourceJar(type: Jar) {
	from sourceSets.main.allSource
}

task javadocJar(type: Jar) {
	from javadoc.destinationDir
}

artifacts {
	archives sourceJar
	archives javadocJar
	archives shadowJar
}

publishing {
	publications {
		marmotClient(MavenPublication) {
			from components.java
			
			artifact sourceJar
			artifact javadocJar
			artifact shadowJar
		}
	}
}

eclipse {
	classpath {
		file {
			withXml {
				def node = it.asNode()
				node.appendNode('classpathentry', [kind: 'output', path: 'build/classes'])
			}
			
			whenMerged { cp ->
				Map entryByPath = cp.entries.groupBy { entry -> entry.path }
				entryByPath.each { key, values ->
					if ( values.size() > 1 ) {
            			def entry = values.first()
            			if ( entry.kind == 'src' ) {
            				entry.includes = []
            				entry.excludes = []
            			}
            			int index = cp.entries.indexOf entry
            			cp.entries.removeAll values
            			cp.entries.add index, entry
					}
				}
				cp.entries.each { entry ->
					if ( entry.kind == 'src' && entry.hasProperty('output') ) {
						if ( entry.path.contains('/test/') ) {
							entry.output = 'build/test_classes'
						}
						else {
							entry.output = 'build/classes'
						}
					}
				}
			}
		}
	}
}

